pluginManagement {
  repositories {
    gradlePluginPortal()
    mavenCentral()
    jcenter()
    maven {
      url "https://dl.bintray.com/kotlin/kotlin-eap"
    }
    maven {
      url "https://cache-redirector.jetbrains.com/jcenter.bintray.com"
    }
  }

  resolutionStrategy {
    def kotlin_plugins = ["kotlin2js", "kotlin", "kotlin-multiplatform"]

    eachPlugin {
      def pluginId = requested.id.id
      if (pluginId in kotlin_plugins) {
        useModule("org.jetbrains.kotlin:kotlin-gradle-plugin:${gradle.kotlinVersion}")
      } else if (pluginId == "kotlinx-serialization") {
        useModule("org.jetbrains.kotlin:kotlin-serialization:${gradle.kotlinVersion}")
      } else if (pluginId == 'com.google.protobuf') {
        useModule("com.google.protobuf:protobuf-gradle-plugin:${gradle.protobufGradlePluginVersion}")
      }
    }
  }
}

def buildLog(message) {
  println("[BUILD] ${message}")
}

gradle.ext {
  try {
    //TODO: for some reason hasProperty is not working for me
    kotlinVersion = getProperty("dukatKotlinVersion")
  } catch (e) {
    kotlinVersion = "1.4.30"
  }

  jupiterVersion = "5.7.0"
  nodeVersion = "14.7.0"
  defaultTsVersion = "3.9.5"
  defaultNpmPackageVersion = "0.5.8-rc.4"
  kotlinSerializationVersion = "1.0.0-RC"
  antlr4_version = "4.7.1"
  protobufGradlePluginVersion = "0.8.13"
  protobufImplementationVersion = "3.15.2"
}
buildLog("gradle settings properties: ${gradle.ext.properties}")

include 'ast-common'
include 'ast-model'
include 'command-line'
include 'graphs'
include 'model-lowerings-common'
include 'compiler'
include 'descriptors'
include 'descriptors-1.4.0'
include 'idl-declarations'
include 'idl-lowerings'
include 'idl-models'
include 'idl-parser'
include 'idl-reference-resolver'
include 'itertools'
include 'js-module-statistics'
include 'js-translator'
include 'js-type-analysis'
include 'kotlin-model-proto'
include 'logging'
include 'model-lowerings'
include 'model-serialization'
include 'module-name-resolver'
include 'node-distrib'
include 'node-package'
include 'ownerContext'
include 'panic'
include 'stdlib'
include 'stdlib-generator'
include 'toposort'
include 'translator'
include 'translator-string'
include 'ts-ast-declarations'
include 'ts-converter'
include 'ts-lowerings'
include 'ts-model'
include 'ts-model-proto'
include 'ts-model-introduction'
include 'ts-translator'
include 'ts-nodes'

project(':descriptors-1.4.0').projectDir = file("$rootDir/version-specific/descriptors-1.4.0")

project(':graphs').projectDir = file("$rootDir/abstract/graphs")
project(':itertools').projectDir = file("$rootDir/abstract/itertools")
project(':toposort').projectDir = file("$rootDir/abstract/toposort")

project(':idl-declarations').projectDir = file("$rootDir/idl/idl-declarations")
project(':idl-lowerings').projectDir = file("$rootDir/idl/idl-lowerings")
project(':idl-models').projectDir = file("$rootDir/idl/idl-models")
project(':idl-parser').projectDir = file("$rootDir/idl/idl-parser")
project(':idl-reference-resolver').projectDir = file("$rootDir/idl/idl-reference-resolver")

project(':js-translator').projectDir = file("$rootDir/javascript/js-translator")
project(':js-type-analysis').projectDir = file("$rootDir/javascript/js-type-analysis")

project(':kotlin-model-proto').projectDir = file("$rootDir/proto/kotlin-model-proto")

project(':ts-ast-declarations').projectDir = file("$rootDir/typescript/ts-ast-declarations")
project(':ts-converter').projectDir = file("$rootDir/typescript/ts-converter")
project(':ts-lowerings').projectDir = file("$rootDir/typescript/ts-lowerings")
project(':ts-model').projectDir = file("$rootDir/typescript/ts-model")
project(':ts-model-proto').projectDir = file("$rootDir/typescript/ts-model-proto")
project(':ts-model-introduction').projectDir = file("$rootDir/typescript/ts-model-introduction")
project(':ts-translator').projectDir = file("$rootDir/typescript/ts-translator")
project(':ts-nodes').projectDir = file("$rootDir/typescript/ts-nodes")

