pluginManagement {
  repositories {
    gradlePluginPortal()
    mavenCentral()
    jcenter()
    maven {
      url "https://dl.bintray.com/kotlin/kotlin-eap"
    }
  }

  resolutionStrategy {
    def kotlin_plugins = ["kotlin2js", "kotlin", "kotlin-multiplatform"]

    eachPlugin {
      def pluginId = requested.id.id
      if (pluginId in kotlin_plugins) {
        useModule("org.jetbrains.kotlin:kotlin-gradle-plugin:${gradle.kotlinVersion}")
      } else if (pluginId == "kotlinx-serialization"){
        useModule("org.jetbrains.kotlin:kotlin-serialization:${gradle.kotlinVersion}")
      } else  if (pluginId == "com.moowork.node") {
        useModule("com.moowork.gradle:gradle-node-plugin:${gradle.nodePluginVersion}")
      }
    }
  }
}

gradle.ext {
  kotlinVersion = "1.3.40"
  jupiterVersion = "5.4.1"
  graalVersion = "19.0.0"
  nodeVersion = "10.15.3"
  npmVersion = "6.9.0"
  nodePluginVersion = "1.3.1"
  kotlinSerializationRuntimeVersion = "0.11.0"
  antlr4_version = "4.7.1"
}


include 'ast'
include 'ast-common'
include 'ast-model'
include 'cli'
include 'compiler'
include 'idl-declarations'
include 'idl-models'
include 'idl-parser'
include 'itertools'
include 'interop'
include 'interop-graal'
include 'logging'
include 'module-name-resolver'
include 'node-introduction'
include 'node-package'
include 'node-lowering'
include 'ownerContext'
include 'panic'
include 'translator-string'
include 'ts'
include 'tsmodel'
include 'tsinterop'
include 'translator'

project(':idl-declarations').projectDir = new File("$rootDir/idl/idl-declarations")
project(':idl-models').projectDir = new File("$rootDir/idl/idl-models")
project(':idl-parser').projectDir = new File("$rootDir/idl/idl-parser")

