plugins {
    id("base")
}

def PROPERTY_REGISTRY = "dukat.npm.registry"
def PROPERTY_PACKAGE = "dukat.npm.packageVersion"
def COMMIT_HASH = "build.vcs.number"

def headCommitHash = project.hasProperty(COMMIT_HASH)
        ? project.findProperty(COMMIT_HASH).substring(0, 8)
        : "git rev-parse --short HEAD".execute().text.trim()

def DISTRIB_PATH = "${project.buildDir}/distrib"
def TYPESCRIPT_VERSION = hasProperty("tsVersion") ? tsVersion : gradle.defaultTsVersion
def PACKAGE_VERSION = hasProperty(PROPERTY_PACKAGE) ? getProperty(PROPERTY_PACKAGE)
                                                        .replace("__DEFAULT__", gradle.defaultNpmPackageVersion)
                                                        .replace("__TIMESTAMP__", new Date().format("yyyyMMdd"))
                                                        .replace("__HEAD__", headCommitHash)
                                                         : gradle.defaultNpmPackageVersion
configurations {
    cliBinary
}

dependencies {
    cliBinary(project(":command-line")) {
        transitive = false
    }
}

task prepareNpmPackage {
    doLast {
        copy {
            from "package.template.json"
            into DISTRIB_PATH
            filter { String line ->
                line.replaceAll("__TS_VERSION__", TYPESCRIPT_VERSION)
                    .replaceAll("__PROTOBUF_VERSION__", gradle.protobufImplementationVersion)
                    .replaceAll("__PACKAGE_VERSION__", PACKAGE_VERSION)
            }
            rename { String fileName -> fileName.replace(".template", "") }
        }
    }
}

task execConfig {
    doLast {
        installNpmDependencies.commandLine  project(":node-distrib").config.nodePath, project(":node-distrib").config.npmPath, "install"
        npmPack.commandLine  project(":node-distrib").config.nodePath, project(":node-distrib").config.npmPath, "pack"
        nodeEnv.commandLine project(":node-distrib").config.nodePath, file("env.js"), "${project.buildDir}/env.json"

        def distribPath = "dukat-${PACKAGE_VERSION}.tgz"

        def registry = project.findProperty(PROPERTY_REGISTRY) ?: "registry.npmjs.org"
        def npmArgs = [project(":node-distrib").config.npmPath, "publish",  distribPath,  "--registry", "https://${registry}"]

        if (project.hasProperty("dukat.npm.tag")) {
            npmArgs += ["--tag", project.getProperty("dukat.npm.tag") as String]
        }

        npmPublish.commandLine npmArgs
    }
}

task installNpmDependencies(dependsOn: [prepareNpmPackage, execConfig, ":node-distrib:config"], type: Exec) {
    workingDir DISTRIB_PATH
    errorOutput = new ByteArrayOutputStream()
    ignoreExitValue true

    doLast {
        if (execResult.exitValue > 0) {
            throw new GradleException(errorOutput.toString())
        }
    }
}

task buildFrontend {
    description = "Copies js files to the node-package distrib folder"
    dependsOn = [":ts-converter:webpack", ":model-serialization:serializeStdLib", installNpmDependencies]

    doLast {
        copy {
            from "${rootProject.projectDir}/README.md"
            into DISTRIB_PATH
        }

        copy {
            from "${project(":ts-converter").buildDir}/package/node_modules/typescript/lib"
            include "*.d.ts"
            into "${DISTRIB_PATH}/d.ts.libs"
        }

        copy {
            from "${project(":ts-converter").buildDir}/bundle/converter.js"
            into "${DISTRIB_PATH}/lib"
        }

        copy {
            from "bin"
            into "${DISTRIB_PATH}/bin"
        }

        copy {
            from project(":model-serialization").getTasksByName("serializeStdLib", true).outputs.files.singleFile[0]
            into "${DISTRIB_PATH}/resources"
        }

    }
}

task buildDistrib {
    description = "Copies all artefacts needed to the node-package distrib folder"
    dependsOn = [buildFrontend, ":command-line:build", ":compiler:download"]

    doLast {
        copy {
            from configurations.cliBinary
            into "${DISTRIB_PATH}/build/runtime"
        }

        copy {
            from project(":compiler").getTasksByName("download", true).outputs.files.singleFile[0]
            into "${DISTRIB_PATH}/build/runtime"
        }
    }
}

task nodeEnv(type: Exec, dependsOn: [execConfig, ":node-distrib:config"]) {
    doFirst {
        mkdir project.buildDir
    }
    workingDir DISTRIB_PATH
}


task npmPack(type: Exec) {
    dependsOn = [buildDistrib]
    workingDir DISTRIB_PATH
}

task npmrc() {
    doLast {
        def token = getProperty("kotlin.npmjs.auth.token")
        def registry = project.findProperty(PROPERTY_REGISTRY) ?: "registry.npmjs.org"
        def customConfig = """
//${registry}/:_authToken="${token}"
        """
        def configFile = "${DISTRIB_PATH}/.npmrc"
        file(configFile).text = customConfig
    }
}


task npmPublish(type: Exec) {
    dependsOn = [npmrc, npmPack]
    workingDir DISTRIB_PATH
}
