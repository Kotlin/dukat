plugins {
    id "com.moowork.node"
}

def PROPERTY_PACKAGE_VERSION = "dukat.npm.version"
def PROPERTY_REGISTRY = "dukat.npm.registry"
def DISTRIB_PATH = "${project.buildDir}/distrib"

node {
    version = gradle.nodeVersion
    npmVersion = gradle.npmVersion

    nodeModulesDir = file(DISTRIB_PATH)

    download = true
}

configurations {
    cliBinary
}

task buildDistrib {
    doLast {
        copy {
            from "package.template.json"
            into DISTRIB_PATH
            rename { String fileName -> fileName.replace(".template", "") }
        }

        copy {
            from "${rootProject.projectDir}/README.md"
            into DISTRIB_PATH
        }

        copy {
            from "${project(":ts").buildDir}/package/node_modules/typescript/lib"
            include "*.d.ts"
            into "${DISTRIB_PATH}/d.ts.libs"
        }

        copy {
            from "${project(":ts").buildDir}/bundle/converter.js"
            into "${DISTRIB_PATH}/lib"
        }

        copy {
            from "bin"
            into "${DISTRIB_PATH}/bin"
        }

        copy {
            from configurations.cliBinary
            into "${DISTRIB_PATH}/build/runtime"
        }

    }
}

task npmVersion(type: NpmTask) {
    onlyIf {
        project.hasProperty(PROPERTY_PACKAGE_VERSION)
    }
    args = ["version", project.findProperty(PROPERTY_PACKAGE_VERSION) ?: "NEVER" ]
}

task npmPack(type: NpmTask) {
    dependsOn = [":cli:build", buildDistrib, npmVersion]
    args = ["pack"]
}

task npmrc() {
    doLast {
        def token = getProperty("kotlin.npmjs.auth.token")
        def registry = project.findProperty(PROPERTY_REGISTRY) ?: "registry.npmjs.org"
        def customConfig = """
//${registry}/:_authToken="${token}"
        """
        def configFile = "${DISTRIB_PATH}/.npmrc"
        file(configFile).text = customConfig;
    }
}

task npmPublish(type: NpmTask) {
    dependsOn = [npmrc, npmPack]

    def packageVersion =
            project.findProperty(PROPERTY_PACKAGE_VERSION) ?:
            new groovy.json.JsonSlurper().parseText(file("package.template.json").text).version

    def distribPath = "dukat-${packageVersion}.tgz"

    def registry = project.findProperty(PROPERTY_REGISTRY) ?: "registry.npmjs.org"
    args = ["publish",  distribPath,  "--registry", "http://${registry}"]
}

dependencies {
    cliBinary(project(":cli")) {
        transitive = false
    }
}