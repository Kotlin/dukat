import org.gradle.internal.os.OperatingSystem;

plugins {
    id "java"
    id "com.google.protobuf"
    id "com.moowork.node"
}

def targetMainDir = "${project.buildDir}/generated/source/proto/main"

def nodeModulesPath = "${project.buildDir}/ts-model-proto-npm"

node {
    workDir = gradle.nodeWorkingDir

    version = gradle.nodeVersion
    npmVersion = gradle.npmVersion
    yarnVersion = gradle.yarnVersion

    nodeModulesDir = file(nodeModulesPath)
    download = true
}


task prepareNpmPackage(type: Copy) {
    from "package.template.json"
    into nodeModulesPath
    rename { String fileName -> fileName.replace(".template", "") }

    from "yarn.lock"
    into nodeModulesPath
}

yarn.dependsOn = [yarnSetup, prepareNpmPackage]

task moveGeneratedTS() {
    doLast {
        def tsDir = file("$targetMainDir/ts")

        if (tsDir.exists() && tsDir.isDirectory()) {
            tsDir.eachFile { file ->
                file.renameTo("$targetMainDir/js/${file.getName()}")
            }
        }
    }
}

dependencies {
    implementation("com.google.protobuf:protobuf-java:${gradle.protobufImplementationVersion}")
}

sourceSets {
    generated {
        java.srcDir("$targetMainDir/java")
    }

    main {
        proto {
            srcDirs = ["src"]
        }

        java {
            srcDirs = ["$targetMainDir/java"]
        }
    }
}

protobuf {
    plugins {
        ts {
            path = file("$nodeModulesPath/node_modules/ts-protoc-gen/bin/protoc-gen-ts")

            if (OperatingSystem.current().isWindows()) {
                path = path + ".cmd"
            }
        }
    }

    generateProtoTasks {
        all().each { task ->
            if(task.name == 'generateProto') {
                task.dependsOn = [yarn]
                task.finalizedBy(moveGeneratedTS)
            }

            task.builtins {
                js {
                    option "import_style=commonjs"
                    option "binary"
                }
            }

            task.plugins {
                ts { }
            }
        }
    }

    protoc {
        artifact = "com.google.protobuf:protoc:${gradle.protobufImplementationVersion}"
    }
}

