syntax = "proto3";
package org.jetbrains.dukat.tsmodelproto;

option java_multiple_files = true;

message NameDeclarationProto {
    oneof type {
        IdentifierDeclarationProto identifier = 1;
        QualifierDeclarationProto qualifier = 2;
    }
}

message IdentifierDeclarationProto {
    string value = 1;
}

message QualifierDeclarationProto {
    NameDeclarationProto left = 1;
    IdentifierDeclarationProto right = 3;
}

message DefinitionInfoDeclarationProto {
    string uid = 1;
    string fileName = 2;
}

message ExportAssignmentDeclarationProto {
    repeated string uid = 1;
    bool isExportEquals = 2;
}

message ParameterValueDeclarationProto {
    oneof type {
        StringLiteralDeclarationProto stringLiteral = 1;
        ThisTypeDeclarationProto thisType = 2;
        IntersectionTypeDeclarationProto intersectionType = 3;
        TupleDeclarationProto tupleDeclaration = 4;
        UnionTypeDeclarationProto unionType = 5;
        ObjectLiteralDeclarationProto objectLiteral = 6;
        TypeReferenceDeclarationProto typeReferenceDeclaration = 7;
        FunctionTypeDeclarationProto functionTypeDeclaration = 8;
        TypeParamReferenceDeclarationProto typeParamReferenceDeclaration = 9;
        NumericLiteralDeclarationProto numericLiteral = 10;
    }
}

message NumericLiteralDeclarationProto {
    string token = 1;
}

message StringLiteralDeclarationProto {
    string token = 1;
}

message ThisTypeDeclarationProto {
}

message ImportEqualsDeclarationProto {
    string name = 1;
    NameDeclarationProto moduleReference = 2;
    string uid = 3;
}

message FunctionTypeDeclarationProto {
    repeated ParameterDeclarationProto parameters = 1;
    ParameterValueDeclarationProto type = 2;
}

message TypeParameterDeclarationProto {
    NameDeclarationProto name = 1;
    repeated ParameterValueDeclarationProto constraints = 2;
    ParameterValueDeclarationProto defaultValue = 3;
}

message IntersectionTypeDeclarationProto {
    repeated ParameterValueDeclarationProto params = 1;
}

message TupleDeclarationProto {
    repeated ParameterValueDeclarationProto params = 1;
}

message UnionTypeDeclarationProto {
    repeated ParameterValueDeclarationProto params = 1;
}

message TypeReferenceDeclarationProto {
    NameDeclarationProto value = 1;
    repeated ParameterValueDeclarationProto params = 2;
    ReferenceDeclarationProto typeReference = 3;
}

message TypeParamReferenceDeclarationProto {
    NameDeclarationProto value = 1;
}

message CallSignatureDeclarationProto {
    repeated ParameterDeclarationProto parameters = 1;
    ParameterValueDeclarationProto type = 2;
    repeated TypeParameterDeclarationProto typeParameters = 3;
}

message ConstructorDeclarationProto {
    repeated ParameterDeclarationProto parameters = 1;
    repeated TypeParameterDeclarationProto typeParameters = 2;
    repeated ModifierDeclarationProto modifiers = 3;
    BlockDeclarationProto body = 6;
}

message BlockDeclarationProto {
    repeated StatementDeclarationProto statements = 1;
}

message FunctionDeclarationProto {
    string name = 1;
    repeated ParameterDeclarationProto parameters = 2;
    ParameterValueDeclarationProto type = 3;
    repeated TypeParameterDeclarationProto typeParameters = 4;
    repeated ModifierDeclarationProto modifiers = 5;
    BlockDeclarationProto body = 6;
    repeated DefinitionInfoDeclarationProto definitionsInfo = 7;
    string uid = 8;
    bool isGenerator = 9;
}

message IndexSignatureDeclarationProto {
    repeated ParameterDeclarationProto indexTypes = 1;
    ParameterValueDeclarationProto returnType = 2;
}

message MethodSignatureDeclarationProto {
    string name = 1;
    repeated ParameterDeclarationProto parameters = 2;
    ParameterValueDeclarationProto type = 3;
    repeated TypeParameterDeclarationProto typeParameters = 4;
    bool optional = 5;
    repeated ModifierDeclarationProto modifiers = 6;
}

message PropertyDeclarationProto {
    string name = 1;
    ExpressionDeclarationProto initializer = 2;
    ParameterValueDeclarationProto type = 3;
    repeated TypeParameterDeclarationProto typeParameters = 4;
    bool optional = 5;
    repeated ModifierDeclarationProto modifiers = 6;
    bool hasType = 7;
}

message ModifierDeclarationProto {
    enum MODIFIER_KIND {
        STATIC = 0;
        DECLARE = 1;
        EXPORT = 2;
        DEFAULT = 3;
    }
    MODIFIER_KIND token = 1;
}

message ObjectLiteralDeclarationProto {
    repeated MemberDeclarationProto members = 1;
    string uid = 2;
}

message MemberDeclarationProto {
    oneof type {
        CallSignatureDeclarationProto callSignature = 1;
        ConstructorDeclarationProto constructorDeclaration = 2;
        FunctionDeclarationProto functionDeclaration = 3;
        IndexSignatureDeclarationProto indexSignature = 4;
        MethodSignatureDeclarationProto methodSignature = 5;
        PropertyDeclarationProto property = 6;
        ObjectLiteralDeclarationProto objectLiteral = 7;
    }
}

message NamespaceImportDeclarationProto {
    string name = 1;
}

message NamedImportsDeclarationProto {
    repeated ImportSpecifierDeclarationProto importSpecifiers = 1;
}

message ImportSpecifierDeclarationProto {
    string name = 1;
    string propertyName = 2;
    string uid = 3;
}

message ImportClauseDeclarationProto {
    oneof type {
        NamespaceImportDeclarationProto namespaceImport = 1;
        NamedImportsDeclarationProto namedImports = 2;
    }
    string referencedFile = 3;
}

message ReferenceClauseDeclarationProto {
    string path = 1;
    string referencedFile = 2;
}

message ReferenceDeclarationProto {
    string uid = 1;
    enum ORIGIN {
        IRRELEVANT = 0;
        IMPORT = 1;
        NAMED_IMPORT = 2;
    }
    enum KIND {
        IRRELEVANT_KIND = 0;
        CLASS = 1;
        INTERFACE = 2;
        TYPEALIAS = 3;
    }
    ORIGIN origin = 2;
    KIND kind = 3;
}

message StringLiteralExpressionDeclarationProto {
    string value = 1;
}

message BooleanLiteralExpressionDeclarationProto {
    bool value = 1;
}

message NumericLiteralExpressionDeclarationProto {
    string value = 1;
}

message BigIntLiteralExpressionDeclarationProto {
    string value = 1;
}

message ObjectLiteralExpressionDeclarationProto {
    repeated MemberDeclarationProto members = 1;

}

message ArrayLiteralExpressionDeclarationProto {
    repeated ExpressionDeclarationProto elements = 1;
}

message RegExLiteralExpressionDeclarationProto {
    string value = 1;
}

message LiteralExpressionDeclarationProto {
    oneof type {
        StringLiteralExpressionDeclarationProto stringLiteral = 1;
        BooleanLiteralExpressionDeclarationProto booleanLiteral = 2;
        NumericLiteralExpressionDeclarationProto numericLiteral = 3;
        BigIntLiteralExpressionDeclarationProto bigIntLiteral = 4;
        ObjectLiteralExpressionDeclarationProto objectLiteral = 5;
        ArrayLiteralExpressionDeclarationProto arrayLiteral = 6;
        RegExLiteralExpressionDeclarationProto regExLiteral = 7;
    }
}

message TemplateTokenDeclarationProto {
    oneof type {
        StringLiteralExpressionDeclarationProto stringLiteral = 1;
        ExpressionDeclarationProto expression = 2;
    }
}

message TemplateExpressionDeclarationProto {
    repeated TemplateTokenDeclarationProto token = 1;
}

message NameExpressionDeclarationProto {
    NameDeclarationProto name = 1;
}

message BinaryExpressionDeclarationProto {
    ExpressionDeclarationProto left = 1;
    string operator = 2;
    ExpressionDeclarationProto right = 3;
}

message UnaryExpressionDeclarationProto {
    ExpressionDeclarationProto operand = 1;
    string operator = 2;
    bool isPrefix = 3;
}

message TypeOfExpressionDeclarationProto {
    ExpressionDeclarationProto expression = 1;
}

message CallExpressionDeclarationProto {
    ExpressionDeclarationProto expression = 1;
    repeated ExpressionDeclarationProto arguments = 2;
    repeated ParameterValueDeclarationProto typeArguments = 3;
}

message PropertyAccessExpressionDeclarationProto {
    ExpressionDeclarationProto expression = 1;
    IdentifierDeclarationProto name = 2;
}

message ElementAccessExpressionDeclarationProto {
    ExpressionDeclarationProto expression = 1;
    ExpressionDeclarationProto argumentExpression = 2;
}

message NewExpressionDeclarationProto {
    ExpressionDeclarationProto expression = 1;
    repeated ExpressionDeclarationProto arguments = 2;
    repeated ParameterValueDeclarationProto typeArguments = 3;
}

message ConditionalExpressionDeclarationProto {
    ExpressionDeclarationProto condition = 1;
    ExpressionDeclarationProto whenTrue = 2;
    ExpressionDeclarationProto whenFalse = 3;
}

message AsExpressionDeclarationProto {
    ExpressionDeclarationProto expression = 1;
    ParameterValueDeclarationProto type = 2;
}

message NonNullExpressionDeclarationProto {
    ExpressionDeclarationProto expression = 1;
}

message YieldExpressionDeclarationProto {
    ExpressionDeclarationProto expression = 1;
    bool hasAsterisk = 2;
}

message ParenthesizedExpressionDeclarationProto {
    ExpressionDeclarationProto expression = 1;
}

message SpreadExpressionDeclarationProto {
    ExpressionDeclarationProto expression = 1;
}

message UnknownExpressionDeclarationProto {
    string meta = 1;
}

message ExpressionDeclarationProto {
    oneof type {
        BinaryExpressionDeclarationProto binaryExpression = 1;
        UnaryExpressionDeclarationProto unaryExpression = 2;
        FunctionDeclarationProto functionExpression = 3;
        ClassDeclarationProto classExpression = 4;
        TypeOfExpressionDeclarationProto typeOfExpression = 5;
        CallExpressionDeclarationProto callExpression = 6;
        NameExpressionDeclarationProto nameExpression = 7;
        LiteralExpressionDeclarationProto literalExpression = 8;
        TemplateExpressionDeclarationProto templateExpression = 9;
        PropertyAccessExpressionDeclarationProto propertyAccessExpression = 10;
        ElementAccessExpressionDeclarationProto elementAccessExpression = 11;
        NewExpressionDeclarationProto newExpression = 12;
        ConditionalExpressionDeclarationProto conditionalExpression = 13;
        AsExpressionDeclarationProto asExpression = 14;
        NonNullExpressionDeclarationProto nonNullExpression = 15;
        YieldExpressionDeclarationProto yieldExpression = 16;
        ParenthesizedExpressionDeclarationProto parenthesizedExpression = 17;
        SpreadExpressionDeclarationProto spreadExpression = 18;
        UnknownExpressionDeclarationProto unknownExpression = 19;
    }
}

message ExpressionStatementDeclarationProto {
    ExpressionDeclarationProto expression = 1;
}

message ForStatementDeclarationProto {
    ExpressionDeclarationProto condition = 1;
    repeated StatementDeclarationProto initializer = 2;
    ExpressionDeclarationProto incrementor = 3;
    repeated StatementDeclarationProto statement = 4;
}

message ForOfStatementDeclarationProto {
    StatementDeclarationProto variable = 1;
    ExpressionDeclarationProto expression = 2;
    repeated StatementDeclarationProto statement = 3;
}

message CaseDeclarationProto {
    ExpressionDeclarationProto condition = 1;
    repeated StatementDeclarationProto statement = 2;
}

message SwitchStatementDeclarationProto {
    ExpressionDeclarationProto expression = 1;
    repeated CaseDeclarationProto case = 2;
}

message IfStatementDeclarationProto {
    ExpressionDeclarationProto condition = 1;
    repeated StatementDeclarationProto thenStatement = 2;
    repeated StatementDeclarationProto elseStatement = 3;
}

message WhileStatementDeclarationProto {
    ExpressionDeclarationProto condition = 1;
    repeated StatementDeclarationProto statement = 2;
}

message ReturnStatementDeclarationProto {
    ExpressionDeclarationProto expression = 1;
}

message BreakStatementDeclarationProto {

}

message ContinueStatementDeclarationProto {

}

message ThrowStatementDeclarationProto {
    ExpressionDeclarationProto expression = 1;
}

message ParameterDeclarationProto {
    string name = 1;
    ParameterValueDeclarationProto type = 2;
    ExpressionDeclarationProto initializer = 3;
    bool vararg = 4;
    bool optional = 5;
    bool hasType = 6;
}

message VariableDeclarationProto {
    string name = 1;
    ParameterValueDeclarationProto type = 2;
    repeated ModifierDeclarationProto modifiers = 3;
    ExpressionDeclarationProto initializer = 4;
    repeated DefinitionInfoDeclarationProto definitionsInfo = 5;
    string uid = 6;
    bool hasType = 7;
}

message TypeAliasDeclarationProto {
    NameDeclarationProto aliasName = 1;
    repeated TypeParameterDeclarationProto typeParameters = 2;
    ParameterValueDeclarationProto typeReference = 3;
    string uid = 4;
}

message HeritageClauseDeclarationProto {
    NameDeclarationProto name = 1;
    repeated ParameterValueDeclarationProto typeArguments = 2;
    bool extending = 3;
    ReferenceDeclarationProto typeReference = 4;
}

message EnumTokenDeclarationProto {
    string value = 1;
    string meta = 2;
}

message EnumDeclarationProto {
    string name = 1;
    repeated EnumTokenDeclarationProto values = 2;
    string uid = 3;
}

message ClassDeclarationProto {
    NameDeclarationProto name = 1;
    repeated MemberDeclarationProto members = 2;
    repeated TypeParameterDeclarationProto typeParameters = 3;
    repeated HeritageClauseDeclarationProto parentEntities = 4;
    repeated ModifierDeclarationProto modifiers = 5;
    repeated DefinitionInfoDeclarationProto definitionsInfo = 6;
    string uid = 7;
}

message InterfaceDeclarationProto {
    NameDeclarationProto name = 1;
    repeated MemberDeclarationProto members = 2;
    repeated TypeParameterDeclarationProto typeParameters = 3;
    repeated HeritageClauseDeclarationProto parentEntities = 4;
    repeated ModifierDeclarationProto modifiers = 5;
    repeated DefinitionInfoDeclarationProto definitionsInfo = 6;
    string uid = 7;
}

message BindingVariableDeclarationProto {
    string name = 1;
    ExpressionDeclarationProto expression = 2;
}

message BindingElementDeclarationProto {
    oneof type {
        ArrayDestructuringDeclarationProto arrayDestructuring = 1;
        BindingVariableDeclarationProto bindingVariable = 2;
    }
}

message ArrayDestructuringDeclarationProto {
    repeated BindingElementDeclarationProto elements = 1;
}

message VariableLikeDeclarationProto {
    oneof type {
        VariableDeclarationProto variable = 1;
        ArrayDestructuringDeclarationProto arrayDestructuring = 2;
    }
}

message StatementDeclarationProto {
    oneof type {
        ExpressionStatementDeclarationProto expressionStatement = 1;
        ReturnStatementDeclarationProto returnStatement = 2;
        ThrowStatementDeclarationProto throwStatement = 3;
        BlockDeclarationProto blockStatement = 4;
        IfStatementDeclarationProto ifStatement = 5;
        WhileStatementDeclarationProto whileStatement = 6;
        VariableLikeDeclarationProto variableLikeDeclaration = 7;
        FunctionDeclarationProto functionDeclaration = 8;
        ForStatementDeclarationProto forStatement = 9;
        ForOfStatementDeclarationProto forOfStatement = 10;
        SwitchStatementDeclarationProto switchStatement = 11;
        BreakStatementDeclarationProto breakStatement = 12;
        ContinueStatementDeclarationProto continueStatement = 13;
    }
}

message TopLevelDeclarationProto {
    oneof type {
        ClassDeclarationProto classDeclaration = 1;
        InterfaceDeclarationProto interfaceDeclaration = 2;
        TypeAliasDeclarationProto aliasDeclaration = 3;
        EnumDeclarationProto enumDeclaration = 4;
        ModuleDeclarationProto moduleDeclaration = 5;
        ExportAssignmentDeclarationProto exportAssignment = 6;
        ImportEqualsDeclarationProto importEquals = 7;
        StatementDeclarationProto statement = 8;
    }
}

message ModuleDeclarationProto {
    NameDeclarationProto packageName = 1;
    repeated ImportClauseDeclarationProto imports = 2;
    repeated ReferenceClauseDeclarationProto references = 3;
    repeated TopLevelDeclarationProto declarations = 4;
    repeated ModifierDeclarationProto modifiers = 5;
    string uid = 6;
    string resourceName = 7;
    repeated DefinitionInfoDeclarationProto definitionsInfo = 8;

    enum MODULE_KIND {
            DECLARATION_FILE = 0;
            SOURCE_FILE = 1;
            AMBIENT_MODULE = 2;
            NAMESPACE = 3;
    }
    MODULE_KIND kind = 9;

    bool isLibSource = 10;
}

message SourceFileDeclarationProto {
    string fileName = 1;
    ModuleDeclarationProto root = 2;
}

message SourceSetDeclarationProto {
    repeated string sourceName = 1;
    repeated SourceFileDeclarationProto sources = 2;
}